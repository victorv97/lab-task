openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/task-list/:
    get:
      operationId: listget_task_lists
      description: 'Returns a paginated list of all tasks in the app.

        Allows filtering by status field.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: 
                      type: integer
                    title: 
                      type: string
                    description:
                      type: string
                    status:
                      type: integer
                    user_id:
                      type: integer
                  example:
                    id: 1
                    title: "title"
                    description: "description"
                    status: 0
                    user_id: 1
                  
          description: ''
      tags:
      - api
  /api/user-task-list/{user_id}/:
    get:
      operationId: retrieveget_user_task_list
      description: 'Returns a list of all the specified user''s tasks.

        Allows filtering by status field.'
      parameters:
      - name: user_id
        in: path
        required: true
        description: ''
        schema:
          type: string
          example: 2
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: 
                      type: integer
                    title: 
                      type: string
                    description:
                      type: string
                    status:
                      type: integer
                    user_id:
                      type: integer
                  example:
                    id: 5
                    title: "title"
                    description: "description"
                    status: 0
                    user_id: 2
          description: ''
      tags:
      - api
  /api/task/{task_id}/:
    get:
      operationId: retrieveget_task
      description: Returns information about a specified task.
      parameters:
      - name: task_id
        in: path
        required: true
        description: ''
        
        schema:
          type: string
          example: '1'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                 id: 
                   type: integer
                 title: 
                   type: string
                 description:
                   type: string
                 status:
                   type: integer
                 user_id:
                   type: integer
                example: 
                  id: 1
                  title: "title"
                  description: "description"
                  status: 0
                  user_id: 1
          description: ''
      tags:
      - api
  /api/task/{task_id}/mark-completed/:
    post:
      operationId: createmark_completed_task
      description: 'Updates status field of an existing task to COMPLETED by specified
        id.

        Returns information about the updated task.'
      parameters:
      - name: task_id
        in: path
        required: true
        description: ''
        schema:
          type: string
          example: 1
      requestBody:
        content:
          application/json:
            schema: 
              type: object
      responses:
        '201':
          content:
            application/json:
              schema: 
                type: object
                properties:
                 id: 
                   type: integer
                 title: 
                   type: string
                 description:
                   type: string
                 status:
                   type: integer
                 user_id:
                   type: integer
                example: 
                  id: 1
                  title: "title"
                  description: "description"
                  status: 2
                  user_id: 1
          description: ''
      tags:
      - api
  /api/create-task/:
    post:
      operationId: createcreate_task
      description: Creates new task and returns information about this one.
      parameters: []
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                 title: 
                   type: string
                 description:
                   type: string
                 status:
                   type: integer
                 user_id:
                   type: integer
              example: 
                  title: "title created"
                  description: "description created"
                  status: 1
                  user_id: 1
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                 id: 
                   type: integer
                 title: 
                   type: string
                 description:
                   type: string
                 status:
                   type: integer
                 user_id:
                   type: integer
                example: 
                  id: 10
                  title: "title created"
                  description: "description created"
                  status: 1
                  user_id: 1
          description: ''
      tags:
      - api
  /api/update-task/{task_id}/:
    post:
      operationId: createupdate_task
      description: 'Updates an existing task by specified id and returns information
        about the updated task.

        Allows partial updating.'
      parameters:
      - name: task_id
        in: path
        required: true
        description: ''
        schema:
          type: string
          example: 10
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
               title: 
                 type: string
               description:
                 type: string
              example: 
                  title: "title updated"
                  description: "description updated"
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                 id: 
                   type: integer
                 title: 
                   type: string
                 description:
                   type: string
                 status:
                   type: integer
                 user_id:
                   type: integer
                example: 
                  id: 10
                  title: "title updated"
                  description: "description updated"
                  status: 1
                  user_id: 1
          description: ''
      tags:
      - api
  /api/signup/:
    post:
      operationId: createsignup
      description: Creates a new user with hashed password and returns user's data
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name: 
                  type: string
                last_name:
                  type: string
                username:
                  type: string
                password:
                  type: string
              example: 
                first_name: "new"
                last_name: "user"
                username: "new_user"
                password: 'password'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  first_name: 
                    type: string
                  last_name:
                    type: string
                  username:
                    type: string
                  password:
                    type: string
                example: 
                  id: 2
                  first_name: "new"
                  last_name: "user"
                  username: "new_user"
                  password: 'pbkdf2_sha256$600000$8xWZcNVr6UvA3bB8OILiLP$6cIyaPpzDJWJhnC6ilQRSMOKeyXV....'
          description: ''
      tags:
      - api
  /api/login/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example: 
                username: "new_user"
                password: "password"
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                  access:
                    type: string
                example: 
                  refresh: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY5NTk5MDQ5OSwiaWF0IjoxNjkzMzk4NDk5LCJqdGkiOiJlY2JmNmZiNGY1MGQ0MmUwOTY4YmQ4OWViYmNiOTMzMiIsInVzZXJfaWQiOjl9.nqCAvDcF7STbzTuhOFGhf1HpmsFb4Zxw_uQrh2obnv0"
                  access: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjkzNDg0ODk5LCJpYXQiOjE2OTMzOTg0OTksImp0aSI6IjVhMzRlMWU3ZTYxMjRhNTc5M2NhMzczYzFjZDBiNWQzIiwidXNlcl9pZCI6OX0.yWs3J1VtDbXdjBoHWd5ujb7s8nrIZdeIQYA_Y8AmsHc"
          description: ''
      tags:
      - api
  /api/login/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
              example: 
                refresh: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY5NTk5MDQ5OSwiaWF0IjoxNjkzMzk4NDk5LCJqdGkiOiJlY2JmNmZiNGY1MGQ0MmUwOTY4YmQ4OWViYmNiOTMzMiIsInVzZXJfaWQiOjl9.nqCAvDcF7STbzTuhOFGhf1HpmsFb4Zxw_uQrh2obnv0"
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                example: 
                  access: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjkzNDg1MTI2LCJpYXQiOjE2OTMzOTg0OTksImp0aSI6IjQ2Y2FhYWM3NDc2NjQ4MDQ5Y2ZlMjFlMjgyMDQyZjg1IiwidXNlcl9pZCI6OX0.4eQXfzbNCQYhokFxz5DtjFNR0QQjFJB0eTg1X8kv7Lc"
          description: ''
      tags:
      - api
  /api/delete-task/{task_id}/:
    delete:
      operationId: destroydelete_task
      description: Deletes an existing task by specified id and returns the corresponding
        success message.
      parameters:
      - name: task_id
        in: path
        required: true
        description: ''
        schema:
          type: string
          example: 10
      responses:
        '200':
          content:
            application/json:
              schema: 
                type: string
                example: "Task 10 successfully deleted"
          description: ''
      tags:
      - api
components:
  schemas:
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
